from fastapi import FastAPI, Request
from fastapi.responses import Response
from linebot import LineBotApi, WebhookHandler
from linebot.models import MessageEvent, TextMessage, TextSendMessage
import os

from fetch_earthquake import fetch_earthquake_data  # ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ fetch_earthquake_asia
from line_bot import handler  # ‡πÉ‡∏ä‡πâ handler ‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å line_bot.py

app = FastAPI()

line_bot_api = LineBotApi(os.getenv("LINE_CHANNEL_ACCESS_TOKEN"))

# ‚úÖ Webhook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LINE
@app.post("/callback")
async def callback(request: Request):
    body = await request.body()
    signature = request.headers.get('X-Line-Signature')

    print("üì© ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö webhook ‡πÅ‡∏•‡πâ‡∏ß:", body.decode())

    try:
        handler.handle(body.decode(), signature)
        print("‚úÖ Handler ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö event ‡πÅ‡∏•‡πâ‡∏ß")
    except Exception as e:
        print("‚ùå ERROR ‡πÉ‡∏ô handler.handle():", e)

    return Response(content="OK", status_code=200)

# üîß ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
def get_subscribers():
    filename = "subscribers.txt"
    default_user = os.getenv("DEFAULT_USER_ID") or "U066bed9e80abfb1930bbca1512ec4b55"
    if not os.path.exists(filename):
        with open(filename, "w") as f:
            #pass  # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡∏•‡πà‡∏≤
            f.write(default_user + "\n")
        print(f"üìÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á {filename} ‡∏û‡∏£‡πâ‡∏≠‡∏° user id ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß")

    with open(filename, "r") as f:
        return list(set(line.strip() for line in f if line.strip()))

# ‚úÖ Manual push message (‡πÄ‡∏ä‡πà‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏´‡∏£‡∏∑‡∏≠ scheduler)
@app.get("/notify")
def manual_notify_all():
    message = fetch_earthquake_data()
    if not message or not message.strip():
        return {"status": "no data"}

    subscribers = get_subscribers()
    success = 0

    for user_id in subscribers:
        try:
            line_bot_api.push_message(user_id, TextSendMessage(text=message))
            success += 1
        except Exception as e:
            print(f"‚ùå Failed to push to {user_id}: {e}")

    return {"status": "sent", "users": success}

